#
# Test cases:
# For simplicity, all preference below will be computed with (weakest-link, dem)
####------------------------------
# EquifinalPaths A0 includes two arguments A0_1 and A0_2 both conlude p1.
# Backward Chaining Search of path A0_1 will be fail.
# Backward Chaining Search of path A0_2 will be successful.
####------------------------------
# Argument A0_1
# Conclude p1
#
r1:p2,p3->p1,1
r2:p4=>p2,1
r3:p5=>p3,1
r4:->p4,1
r5:->p5,1
####------------------------------
# Argument A0_2
# Conclude p1
#
r6:p6,p7->p1,1
r7:p8=>p6,1
r8:p9=>p7,1
r9:p10=>p8,1
r10:p11=>p9,1
r11:->p10,1
r12:->p11,1
####------------------------------
# Argument B0_1
# Conclude !p3
#
r13:p12,p13->!p3,1
r14:p14=>p12,1
r15:p15=>p13,1
r16:->p14,1
r17:->p15,1
####------------------------------
# Argument B0_2
# Conclude !p3
#
r18:p16,p17->!p3,1
r19:p18=>p16,1
r20:p19=>p17,1
r21:p20=>p18,1
r22:p21=>p19,1
r23:->p20,1
r24:->p21,1
####------------------------------
# EquifinalPaths C0 seperate at r25
# There are 4 paths, only 2 listed below: C0_1 & C0_2
# Argument C0_1
# Conclude !p13
#
r25:p22,p23->!p13,1
r26:p24=>p22,1
r27:p25=>p23,1
r28:->p24,1
r29:->p25,1
####------------------------------
# Argument C0_2
# Conclude !p13
#
r30:p26=>p22,1
r31:p27=>p23,1
r32:p28=>p26,1
r33:p29=>p27,1
r34:->p28,1
r35:->p29,1
####------------------------------
# EquifinalPaths C1 facing the same problem with C0
# Argument C1_1
# Conclude !p17
#
r36:p38,p39->!p17,1
r37:p40=>p38,1
r38:p41=>p39,1
r39:->p40,1
r40:->p41,1
####------------------------------
# Argument C1_2
# Conclude !p17
#
r41:p42=>p38,1
r42:p43=>p39,1
r43:p44=>p42,1
r44:p45=>p43,1
r45:->p44,1
r46:->p45,1
####------------------------------
# Argument D0_1
# Conclude !r27
#
r47:p30,p31->!r27,1
r48:p32=>p30,1
r49:p33=>p31,1
r50:->p32,1
r51:->p33,1
####-
# Argument D0_2
# Conclude !r27
#
r52:p34=>p30,1
r53:p35=>p31,1
r54:p36=>p34,1
r55:p37=>p35,1
r56:->p36,1
r57:->p37,1
####------------------------------
# Argument D1_1
# Conclude !p23
#
r58:p46,p47->!p23,1
r59:p48=>p46,1
r60:p49=>p47,1
r61:->p48,1
r62:->p49,1
####--
# Argument D1_2
# Conclude !p23
#
r63:p50=>p46,1
r64:p51=>p47,1
r65:p52=>p50,1
r66:p53=>p51,1
r67:->p52,1
r68:->p53,1
####------------------------------
#Following Arguments are necessary for Backward Chaining Search of A0_2.
####------------------------------
# EquifinalPaths B1 contains two arguments both conclude !p7. They separate at p55.
# Argument B1_1
# Conclude !p7
#
r69:p54,p55->!p7,1
r70:p56=>p54,1
r71:p57=>p55,1
r72:->p56,1
r73:->p57,1
####--
# Argument B1_2
# Conclude !p7
#
r74:p58=>p55,1
r76:p59=>p58,1
r78:->p59,1
####------------------------------
# Argument C2_1
# Conclude !r71
#
r79:p60,p61->!r71,1
r80:p62=>p60,1
r81:p63=>p61,1
r82:->p62,1
r83:->p63,1
####--
# Argument C2_2
#
r84:p64=>p61,1
r85:p65=>p64,1
r86:->p65,1
####------------------------------
# Argument C3
# Conclude !74
#
r87:p66->!r74,1
r88:p67=>p66,1
r89:p68=>p67,1
r90:->p68,1
####------------------------------
# Argument D2_1
# Conclude !p61
#
r91:p69,p70->!p61,1
r92:p71=>p69,1
r93:p72=>p70,1
r94:->p71,1
r95:->p72,1
####---
# Argument D2_2
# Conclude !p61
#
r96:p73=>p70,1
r97:p74=>p73,1
r98:->p74,1
####------------------------------
# Argument E0
# Conclude !r93
#
r99:=>!r93,1
####------------------------------
# Argument E1
# Conclude !r97
#
r100:=>!r97,1
####------------------------------
# Argument E2
# Conclude !p66
#
r101:p75=>!p66,0
r102:->p75,1

